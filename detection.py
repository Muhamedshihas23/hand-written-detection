# -*- coding: utf-8 -*-
"""detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16Bz9A38LGKvnt53O3WTrNeEEcSVBRjjc
"""

import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.utils import to_categorical

# Load the MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Shape of data
print("Training data shape:", x_train.shape)
print("Testing data shape:", x_test.shape)

# Display a sample image
plt.imshow(x_train[0], cmap='gray')
plt.title(f"Label: {y_train[0]}")
plt.axis('off')
plt.show()

# Normalize the pixel values (0–255 to 0–1)
x_train = x_train / 255.0
x_test = x_test / 255.0

# Reshape to add channel dimension (28,28) → (28,28,1)
x_train = x_train.reshape(-1, 28, 28, 1)
x_test = x_test.reshape(-1, 28, 28, 1)

# One-hot encode labels
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),
    MaxPooling2D((2,2)),

    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D((2,2)),

    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.3),
    Dense(10, activation='softmax')  # 10 classes (0 to 9)
])

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model.summary()

history = model.fit(x_train, y_train, epochs=5, validation_split=0.1, batch_size=64)

test_loss, test_accuracy = model.evaluate(x_test, y_test)
print(f"Test Accuracy: {test_accuracy:.2f}")

# Predict the first 5 test samples
predictions = model.predict(x_test[:5])

# Show predictions
for i in range(5):
    plt.imshow(x_test[i].reshape(28,28), cmap='gray')
    plt.title(f"Predicted: {np.argmax(predictions[i])}")
    plt.axis('off')
    plt.show()

# Save the model in HDF5 format (filename ends with .h5)
model.save("mnist_digit_classifier.h5")

# OR: Save in TensorFlow SavedModel format (folder)
model.save("mnist_model")

model.save("mnist_digit_classifier.keras")